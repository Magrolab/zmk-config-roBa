#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "hold-preferred";
    quick-tap-ms = <0>;
    tapping-term-ms = <100>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E  &kp R  &kp T                                &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D  &kp F  &kp G      &none      &none          &kp H      &kp J  &kp K      &kp L    &lt 5 LS(LEFT_SHIFT)
&kp Z      &kp X         &kp C  &kp V  &kp B      &none      &none          &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &none  &to 3  &kp SPACE  &to 2      &kp BACKSPACE  &kp ENTER                             &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &kp A         &kp GRAVE  &none                               &kp F1     &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &kp LEFT_ALT  &kp TAB    &none   &trans      &kp F13         &kp F6     &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans        &trans     &trans  &trans      &trans          &trans     &trans  &trans  &trans  &kp F11
&trans  &trans  &trans        &trans     &trans  &trans      &kp LEFT_ARROW  &kp RIGHT                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp PLUS   &kp N7        &kp N8        &kp N9  &kp EQUAL                                      &none           &mkp MB4  &kp UP_ARROW  &mkp MB5   &none
&kp MINUS  &kp N4        &kp N5        &kp N6  &kp LS(LSHFT)  &none                   &none   &kp ESC         &mkp MB1  &mkp MB3      &mkp MB2   &kp LS(LEFT_SHIFT)
&kp ASTRK  &kp NUMBER_1  &kp NUMBER_2  &kp N3  &kp ESC        &none                   &trans  &kp LEFT_SHIFT  &kp LEFT  &kp DOWN      &kp RIGHT  &none
&kp SLASH  &kp N0        &kp PERIOD    &trans  &trans         &kp LS(LEFT_SHIFT)      &trans  &trans                                             &none
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                                              &trans  &kp MINUS      &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp LS(LEFT_SHIFT)  &trans                  &trans  &trans  &kp GRAVE      &kp ASTERISK   &kp SEMI          &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans              &trans                  &trans  &trans  &kp BACKSLASH  &kp LESS_THAN  &kp GREATER_THAN  &kp SLASH
&bt BT_CLR_ALL  &bt BT_SEL 0            &trans          &trans                   &trans              &kp LS(LEFT_SHIFT)      &trans  &trans                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &none   &none   &none   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &kp LA(LEFT_ALT)  &kp LS(LEFT_SHIFT)                              &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &none             &none               &trans      &none           &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &none             &none               &trans      &trans          &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans            &trans              &trans      &kp LEFT_ARROW  &kp RIGHT_ARROW                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
